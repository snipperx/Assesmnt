<?php

namespace App\Models;

use App\Notifications\ProductUpdatedNotification;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Facades\Mail;

class Product extends Model
{
    use HasFactory;

    protected $table = 'products';

    protected $guarded = ['id'];
    protected $fillable = [
        'name',
        'description',
        'slug',
        'images',
        'is_active'
    ];

    /**
     * @return BelongsToMany
     */
    public function  categories(): BelongsToMany
    {
        return $this->belongstoMany(Category::class);
    }

    /**
     * @return HasMany
     */
    public function variants(): HasMany
    {
        return $this->hasMany(ProductVariant::class);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        //Event listener for when a product is being created
        static::creating (function ($product) {
            $product->created_by = auth()->id();
        });

        //Event listener for when a product is being updated
        static::updating (function ($product) {
            $product->updated_by = auth()->id();
        });

        //Event listener for when a product has been updated
        static::created(queueable (function ($product) {
            // Load the user relationship with necessary columns and send email
            Mail::to($product->loadMissing('user:id,email')
            ->user->email)
                ->send(new ProductUpdatedNotification($product));
        }));

        //Event listener for when a product has been updated
        static::updated(queueable (function ($product) {
            // Load the user relationship with necessary columns and send email
            Mail::to($product->loadMissing('user:id,email')
                ->user->email)
                ->send(new ProductUpdatedNotification($product));
        }));

    }



    public static function getIdBySlug($slug){
        if ($product = Product::select('id')
            ->where('slug', $slug)
            ->first()) {
            return $product->id;
        }
        return 0;
    }

}
